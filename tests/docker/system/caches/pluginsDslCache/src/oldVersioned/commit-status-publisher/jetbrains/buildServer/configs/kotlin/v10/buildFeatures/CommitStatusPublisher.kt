package jetbrains.buildServer.configs.kotlin.v10.buildFeatures

import jetbrains.buildServer.configs.kotlin.v10.*

/**
 * A [build feature](https://www.jetbrains.com/help/teamcity/?Commit+Status+Publisher) publishing
 * status to external system
 *
 * **Example.**
 * Enables publishing build statuses to commits in JetBrains Space.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = space {
 *     authType = connection {
 *       connectionId = "<JetBrains Space connection id>"
 *     }
 *     displayName = "<Display name>" // optional, "TeamCity" by default
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in GitHub.com / GitHub Enterprise.
 * It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = github {
 *     githubUrl = "<GitHub URL, https://api.github.com for github.com>"
 *     authType = personalToken { // authType = password { ... } to use username and password
 *       token = "credentialsJSON:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in GitHub.com / GitHub Enterprise.
 * Uses the credentials of the VCS root.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = github {
 *     githubUrl = "<GitHub URL, https://api.github.com for github.com>"
 *     authType = vcsRoot()
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in GitHub.com / GitHub Enterprise.
 * Uses a GitHub App installation token stored in TeamCity.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // A VCS root must be specified to use this authentication type
 *   publisher = github {
 *     githubUrl = "<GitHub URL, https://api.github.com for github.com>"
 *     authType = storedToken {
 *       tokenId = "tc_token_id:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in GitLab.com / GitLab CE/EE.
 * It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = gitlab {
 *     gitlabApiUrl = "https://<GitLab URL>/api/v4" // optional, the URL will be composed based on the VCS root fetch URL if omitted (https://gitlab.com/api/v4 for gitlab.com)
 *     accessToken = personalToken { // authType = vcsRoot() to take credentials from the VCS root
 *       accessToken = "credentialsJSON:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in GitLab.com / GitLab CE/EE.
 * Instead of personal token authentication a refreshable access token stored in TeamCity is used.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = gitlab {
 *     gitlabApiUrl = "https://<GitLab URL>/api/v4" // optional, the URL will be composed based on the VCS root fetch URL if omitted (https://gitlab.com/api/v4 for gitlab.com)
 *     authType = storedToken {
 *       tokenId = "tc_token_id:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Bitbucket Cloud.
 * The password must be Bitbucket App password generated by user.
 * It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = bitbucketCloud {
 *     authType = password { // authType = vcsRoot() to take credentials from the VCS root
 *       userName = "<username>"
 *       password = "credentialsJSON:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Bitbucket Cloud.
 * Instead of password authentication an access token stored in TeamCity is used.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = bitbucketCloud {
 *     authType = storedToken {
 *       tokenId = "tc_token_id:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Bitbucket Server / Data Center.
 * The password can be either user's password (not recommended) or Bitbucket HTTP access token generated by user.
 * It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = bitbucketServer {
 *       url = "<Bitbucket Server Base URL>" // optional, the URL will be composed based on the VCS root fetch URL if omitted
 *       authType = password { // authType = vcsRoot() to take credentials from the VCS root
 *         userName = "<username>"
 *         password = "credentialsJSON:*****"
 *       }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Bitbucket Server / Data Center.
 * Instead of password authentication an access token stored in TeamCity is used.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = bitbucketServer {
 *     url = "<Bitbucket Server Base URL>"
 *     authType = storedToken {
 *       tokenId = "tc_token_id:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Azure DevOps
 * For now only personal access token authentication type is supported. It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = azureDevOps {
 *     serverUrl = "<Azure DevOps URL>" // optional
 *     authType = personalToken {
 *       accessToken = "tc_token_id:*****"
 *     }
 *     publishPullRequests = true // optional
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Azure DevOps
 * Instead of password authentication an access token stored in TeamCity is used.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = azureDevOps {
 *     serverUrl = "<Azure DevOps URL>" // optional
 *     authType = storedToken {
 *       tokenId = "tc_token_id:*****"
 *     }
 *     publishPullRequests = true // optional
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to Perforce Helix Swarm.
 * For now only personal access token authentication type is supported. It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = swarm {
 *     serverUrl = "<Swarm URL>"
 *     username = "<username>"
 *     token = "credentialsJSON:*****"
 *     createSwarmTest = true // optional, if set, TeamCity will create a test run on the Swarm server and update its status according to the build status in TeamCity.
 *     commentOnEvents = true // optional
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables voting in Gerrit based on build statuses
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = gerrit {
 *     server = "<Gerrit server URL>"
 *     gerritProject = "<Gerrit project name>"
 *     label = "<label>" // e.g. Verified
 *     failureVote = "<failed build vote>" // e.g. -1
 *     successVote = "<successful build vote>" // e.g. +1
 *     userName = "<username>"
 *     uploadedKey = "<SSH key name>"
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to JetBrains Upsource.
 * It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = upsource {
 *     serverUrl = "<Upsource URL>"
 *     projectId = "<Upsource project id>"
 *     userName = "<username>"
 *     password = "credentialsJSON:*****"
 *   }
 * }
 * ```
 *
 *
 * @see commitStatusPublisher
 */
open class CommitStatusPublisher : BuildFeature {
    constructor(init: CommitStatusPublisher.() -> Unit = {}, base: CommitStatusPublisher? = null): super(base = base as BuildFeature?) {
        type = "commit-status-publisher"
        init()
    }

    /**
     * Id of the VCS root for which commits a status should be published.
     * Set to an empty string to publish status for all VCS roots attached to a build configuration.
     */
    var vcsRootExtId by stringParameter("vcsRootId")

    /**
     * Specifies to which system a status should be published
     */
    var publisher by compoundParameter<Publisher>("publisherId")

    sealed class Publisher(value: String? = null): CompoundParam(value) {
        class BitbucketCloud() : Publisher("bitbucketCloudPublisher") {

            /**
             * A username for Bitbucket Cloud connection
             */
            @Deprecated("Use authType property instead")
            var userName by stringParameter("bitbucketUsername")

            /**
             * A password for Bitbucket Cloud connection
             */
            @Deprecated("Use authType property instead")
            var password by stringParameter("secure:bitbucketPassword")

            /**
             * Use username / password credentials
             */
            var authType by compoundParameter<AuthType>()

            sealed class AuthType(value: String? = null): CompoundParam(value) {
                class Password() : AuthType("password") {

                    /**
                     * A username for Bitbucket Cloud connection
                     */
                    var userName by stringParameter("bitbucketUsername")

                    /**
                     * A password for Bitbucket Cloud connection
                     */
                    var password by stringParameter("secure:bitbucketPassword")

                }

                class StoredToken() : AuthType("storedToken") {

                    /**
                     * The internal ID of the token to use for the connection
                     */
                    var tokenId by stringParameter()

                }

                class VcsRoot() : AuthType("vcsRoot") {

                }
            }

            fun password(init: AuthType.Password.() -> Unit = {}) : AuthType.Password {
                val result = AuthType.Password()
                result.init()
                return result
            }

            /**
             * Use token credentials stored in TeamCity
             */
            fun storedToken(init: AuthType.StoredToken.() -> Unit = {}) : AuthType.StoredToken {
                val result = AuthType.StoredToken()
                result.init()
                return result
            }

            /**
             * Use VCS root credentials
             */
            fun vcsRoot() = AuthType.VcsRoot()

        }

        class BitbucketServer() : Publisher("atlassianStashPublisher") {

            /**
             * Bitbucket Server URL
             */
            var url by stringParameter("stashBaseUrl")

            /**
             * A username for Bitbucket Server / Data Center connection
             */
            @Deprecated("Use authType property instead")
            var userName by stringParameter("stashUsername")

            /**
             * A password for Bitbucket Server / Data Center connection
             */
            @Deprecated("Use authType property instead")
            var password by stringParameter("secure:stashPassword")

            var authType by compoundParameter<AuthType>()

            sealed class AuthType(value: String? = null): CompoundParam(value) {
                class Password() : AuthType("password") {

                    /**
                     * A username for Bitbucket Server / Data Center connection
                     */
                    var userName by stringParameter("stashUsername")

                    /**
                     * A password for Bitbucket Server / Data Center connection
                     */
                    var password by stringParameter("secure:stashPassword")

                }

                class StoredToken() : AuthType("storedToken") {

                    /**
                     * The internal ID of the token to use for the connection
                     */
                    var tokenId by stringParameter()

                }

                class VcsRoot() : AuthType("vcsRoot") {

                }
            }

            /**
             * Use username / password credentials
             */
            fun password(init: AuthType.Password.() -> Unit = {}) : AuthType.Password {
                val result = AuthType.Password()
                result.init()
                return result
            }

            /**
             * Use token credentials stored in TeamCity
             */
            fun storedToken(init: AuthType.StoredToken.() -> Unit = {}) : AuthType.StoredToken {
                val result = AuthType.StoredToken()
                result.init()
                return result
            }

            /**
             * Use VCS root credentials
             */
            fun vcsRoot() = AuthType.VcsRoot()

        }

        class Gerrit() : Publisher("gerritStatusPublisher") {

            /**
             * Gerrit server in the format: {server}[:{port}]
             */
            var server by stringParameter("gerritServer")

            /**
             * Gerrit project name
             */
            var gerritProject by stringParameter()

            /**
             * Gerrit label to be used, "Verified" is used if the parameter is left blank
             */
            var label by stringParameter()

            /**
             * A failed build vote, e.g. "-1"
             */
            var failureVote by stringParameter()

            /**
             * A successful build vote, e.g. "+1"
             */
            var successVote by stringParameter()

            /**
             * A username for Gerrit connection
             */
            var userName by stringParameter("gerritUsername")

            /**
             * Name of the [uploaded key](https://www.jetbrains.com/help/teamcity/?SSH+Keys+Management) to use for Gerrit connection
             */
            var uploadedKey by stringParameter("teamcitySshKey")

        }

        class Github() : Publisher("githubStatusPublisher") {

            /**
             * GitHub server URL.
             * Use "https://api.github.com" for projects hosted at github.com. For GitHub enterprise use the URL in the
             * following format: http{s}://{host}:{port}/api/v3
             */
            var githubUrl by stringParameter("github_host")

            /**
             * Type of authentication
             */
            var authType by compoundParameter<AuthType>("github_authentication_type")

            sealed class AuthType(value: String? = null): CompoundParam(value) {
                class PersonalToken() : AuthType("token") {

                    /**
                     * Personal token to use
                     */
                    var token by stringParameter("secure:github_access_token")

                }

                class Password() : AuthType("password") {

                    /**
                     * A username for GitHub connection
                     */
                    var userName by stringParameter("github_username")

                    /**
                     * A password for GitHub connection
                     */
                    var password by stringParameter("secure:github_password")

                }

                class VcsRoot() : AuthType("vcsRoot") {

                }

                class StoredToken() : AuthType("storedToken") {

                    /**
                     * Internal ID of a token in TeamCity token storage
                     */
                    var tokenId by stringParameter()

                }
            }

            /**
             * Authentication using personal token
             */
            fun personalToken(init: AuthType.PersonalToken.() -> Unit = {}) : AuthType.PersonalToken {
                val result = AuthType.PersonalToken()
                result.init()
                return result
            }

            /**
             * Password authentication
             */
            fun password(init: AuthType.Password.() -> Unit = {}) : AuthType.Password {
                val result = AuthType.Password()
                result.init()
                return result
            }

            /**
             * Use VCS root credentials
             */
            fun vcsRoot() = AuthType.VcsRoot()

            /**
             * Use GitHub App credentials
             */
            fun storedToken(init: AuthType.StoredToken.() -> Unit = {}) : AuthType.StoredToken {
                val result = AuthType.StoredToken()
                result.init()
                return result
            }

        }

        class Gitlab() : Publisher("gitlabStatusPublisher") {

            /**
             * GitLab URL in the format http[s]://{hostname}[:port]/api/v4. If unspecified, the URL will be composed based on the VCS root fetch URL.
             */
            var gitlabApiUrl by stringParameter()

            /**
             * Access token to use for GitLab connection. Can be found at /profile/account in GitLab.
             */
            @Deprecated("Use authType property instead")
            var accessToken by stringParameter("secure:gitlabAccessToken")

            var authType by compoundParameter<AuthType>()

            sealed class AuthType(value: String? = null): CompoundParam(value) {
                class PersonalToken() : AuthType("token") {

                    /**
                     * Access token to use for GitLab connection. Can be found at /profile/account in GitLab.
                     */
                    var accessToken by stringParameter("secure:gitlabAccessToken")

                }

                class StoredToken() : AuthType("storedToken") {

                    /**
                     * Internal ID of a token in TeamCity token storage
                     */
                    var tokenId by stringParameter()

                }

                class VcsRoot() : AuthType("vcsRoot") {

                }
            }

            /**
             * Authentication using personal token
             */
            fun personalToken(init: AuthType.PersonalToken.() -> Unit = {}) : AuthType.PersonalToken {
                val result = AuthType.PersonalToken()
                result.init()
                return result
            }

            /**
             * Use GitLab OAuth credentials
             */
            fun storedToken(init: AuthType.StoredToken.() -> Unit = {}) : AuthType.StoredToken {
                val result = AuthType.StoredToken()
                result.init()
                return result
            }

            /**
             * Use VCS root credentials
             */
            fun vcsRoot() = AuthType.VcsRoot()

        }

        class Upsource() : Publisher("upsourcePublisher") {

            /**
             * Upsource server URL
             */
            var serverUrl by stringParameter("upsourceServerUrl")

            /**
             * Upsource project ID
             */
            var projectId by stringParameter("upsourceProjectId")

            /**
             * A username for Upsource connection
             */
            var userName by stringParameter("upsourceUsername")

            /**
             * A password for Upsource connection
             */
            var password by stringParameter("secure:upsourcePassword")

        }

        class AzureDevOps() : Publisher("tfs") {

            /**
             * Azure DevOps / TFS Server URL
             */
            var serverUrl by stringParameter("tfsServerUrl")

            /**
             * Authentication type
             */
            var authType by compoundParameter<AuthType>("tfsAuthType")

            sealed class AuthType(value: String? = null): CompoundParam(value) {
                class PersonalToken() : AuthType("token") {

                    /**
                     * A Personal Access Token value
                     */
                    var accessToken by stringParameter("secure:accessToken")

                }

                class StoredToken() : AuthType("storedToken") {

                    /**
                     * The internal ID of the token to use for the connection
                     */
                    var tokenId by stringParameter()

                }
            }

            /**
             * Authentication using personal token
             */
            fun personalToken(init: AuthType.PersonalToken.() -> Unit = {}) : AuthType.PersonalToken {
                val result = AuthType.PersonalToken()
                result.init()
                return result
            }

            /**
             * Use token credentials stored in TeamCity
             */
            fun storedToken(init: AuthType.StoredToken.() -> Unit = {}) : AuthType.StoredToken {
                val result = AuthType.StoredToken()
                result.init()
                return result
            }

            /**
             * Enables publishing build status for pull requests
             */
            var publishPullRequests by booleanParameter("publish.pull.requests", trueValue = "true", falseValue = "")

        }

        class Tfs() : Publisher("tfs") {

            /**
             * Azure DevOps / TFS Server URL
             */
            var serverUrl by stringParameter("tfsServerUrl")

            /**
             * Authentication type
             */
            var authType by stringParameter("tfsAuthType")

            /**
             * A Personal Access Token value
             */
            var accessToken by stringParameter("secure:accessToken")

            /**
             * Enables publishing build status for pull requests
             */
            var publishPullRequests by booleanParameter("publish.pull.requests", trueValue = "true", falseValue = "")

        }

        class Space() : Publisher("spaceStatusPublisher") {

            /**
             * Type of authentication
             */
            var authType by compoundParameter<AuthType>("spaceCredentialsType")

            sealed class AuthType(value: String? = null): CompoundParam(value) {
                class Connection() : AuthType("spaceCredentialsConnection") {

                    /**
                     * JetBrains Space Connection project feature ID
                     */
                    var connectionId by stringParameter("spaceConnectionId")

                }
            }

            /**
             * Authentication using JetBrains Space Connection
             */
            fun connection(init: AuthType.Connection.() -> Unit = {}) : AuthType.Connection {
                val result = AuthType.Connection()
                result.init()
                return result
            }

            /**
             * JetBrains Space Project Key
             */
            var projectKey by stringParameter("spaceProjectKey")

            /**
             * Display name
             */
            var displayName by stringParameter("spaceCommitStatusPublisherDisplayName")

        }

        class Swarm() : Publisher("perforceSwarmPublisher") {

            /**
             * Peforce Helix Swarm Server URL
             */
            var serverUrl by stringParameter("swarmUrl")

            /**
             * Username to access the server.
             */
            var username by stringParameter("swarmUser")

            /**
             * Token or password to access the Perforc Swarm server.
             */
            var token by stringParameter("secure:swarmPassword")

            /**
             * If set, TeamCity will create a test run on the Helix Swarm server and update its status according to
             * the build status in TeamCity.
             */
            var createSwarmTest by booleanParameter()

            /**
             * If enabled, TeamCity will add comments to a related Swarm review when a build fails or finishes successfully. This defaults to <code>true</code>.
             */
            var commentOnEvents by booleanParameter()

        }
    }

    /**
     * Publish status to Bitbucket Cloud
     */
    fun bitbucketCloud(init: Publisher.BitbucketCloud.() -> Unit = {}) : Publisher.BitbucketCloud {
        val result = Publisher.BitbucketCloud()
        result.init()
        return result
    }

    /**
     * Publish status to Bitbucket Server / Data Center
     */
    fun bitbucketServer(init: Publisher.BitbucketServer.() -> Unit = {}) : Publisher.BitbucketServer {
        val result = Publisher.BitbucketServer()
        result.init()
        return result
    }

    /**
     * Publish status to Gerrit Code Review
     */
    fun gerrit(init: Publisher.Gerrit.() -> Unit = {}) : Publisher.Gerrit {
        val result = Publisher.Gerrit()
        result.init()
        return result
    }

    /**
     * Publish status to GitHub
     */
    fun github(init: Publisher.Github.() -> Unit = {}) : Publisher.Github {
        val result = Publisher.Github()
        result.init()
        return result
    }

    /**
     * Publish status to GitLab
     */
    fun gitlab(init: Publisher.Gitlab.() -> Unit = {}) : Publisher.Gitlab {
        val result = Publisher.Gitlab()
        result.init()
        return result
    }

    /**
     * Publish status to Upsource
     */
    fun upsource(init: Publisher.Upsource.() -> Unit = {}) : Publisher.Upsource {
        val result = Publisher.Upsource()
        result.init()
        return result
    }

    /**
     * Publish build status to Azure DevOps / TFS
     */
    fun azureDevOps(init: Publisher.AzureDevOps.() -> Unit = {}) : Publisher.AzureDevOps {
        val result = Publisher.AzureDevOps()
        result.init()
        return result
    }

    /**
     * Publish build status to Azure DevOps / TFS
     */
    @Deprecated("Use 'azureDevOps' option instead")
    fun tfs(init: Publisher.Tfs.() -> Unit = {}) : Publisher.Tfs {
        val result = Publisher.Tfs()
        result.init()
        return result
    }

    /**
     * Publish status to JetBrains Space
     */
    fun space(init: Publisher.Space.() -> Unit = {}) : Publisher.Space {
        val result = Publisher.Space()
        result.init()
        return result
    }

    /**
     * Publish build status to Perforce Helix Swarm
     */
    fun swarm(init: Publisher.Swarm.() -> Unit = {}) : Publisher.Swarm {
        val result = Publisher.Swarm()
        result.init()
        return result
    }

}


/**
 * Enables [status publishing](https://www.jetbrains.com/help/teamcity/?Commit+Status+Publisher) to external system
 *
 * **Example.**
 * Enables publishing build statuses to commits in JetBrains Space.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = space {
 *     authType = connection {
 *       connectionId = "<JetBrains Space connection id>"
 *     }
 *     displayName = "<Display name>" // optional, "TeamCity" by default
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in GitHub.com / GitHub Enterprise.
 * It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = github {
 *     githubUrl = "<GitHub URL, https://api.github.com for github.com>"
 *     authType = personalToken { // authType = password { ... } to use username and password
 *       token = "credentialsJSON:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in GitHub.com / GitHub Enterprise.
 * Uses the credentials of the VCS root.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = github {
 *     githubUrl = "<GitHub URL, https://api.github.com for github.com>"
 *     authType = vcsRoot()
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in GitHub.com / GitHub Enterprise.
 * Uses a GitHub App installation token stored in TeamCity.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // A VCS root must be specified to use this authentication type
 *   publisher = github {
 *     githubUrl = "<GitHub URL, https://api.github.com for github.com>"
 *     authType = storedToken {
 *       tokenId = "tc_token_id:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in GitLab.com / GitLab CE/EE.
 * It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = gitlab {
 *     gitlabApiUrl = "https://<GitLab URL>/api/v4" // optional, the URL will be composed based on the VCS root fetch URL if omitted (https://gitlab.com/api/v4 for gitlab.com)
 *     accessToken = personalToken { // authType = vcsRoot() to take credentials from the VCS root
 *       accessToken = "credentialsJSON:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in GitLab.com / GitLab CE/EE.
 * Instead of personal token authentication a refreshable access token stored in TeamCity is used.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = gitlab {
 *     gitlabApiUrl = "https://<GitLab URL>/api/v4" // optional, the URL will be composed based on the VCS root fetch URL if omitted (https://gitlab.com/api/v4 for gitlab.com)
 *     authType = storedToken {
 *       tokenId = "tc_token_id:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Bitbucket Cloud.
 * The password must be Bitbucket App password generated by user.
 * It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = bitbucketCloud {
 *     authType = password { // authType = vcsRoot() to take credentials from the VCS root
 *       userName = "<username>"
 *       password = "credentialsJSON:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Bitbucket Cloud.
 * Instead of password authentication an access token stored in TeamCity is used.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = bitbucketCloud {
 *     authType = storedToken {
 *       tokenId = "tc_token_id:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Bitbucket Server / Data Center.
 * The password can be either user's password (not recommended) or Bitbucket HTTP access token generated by user.
 * It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = bitbucketServer {
 *       url = "<Bitbucket Server Base URL>" // optional, the URL will be composed based on the VCS root fetch URL if omitted
 *       authType = password { // authType = vcsRoot() to take credentials from the VCS root
 *         userName = "<username>"
 *         password = "credentialsJSON:*****"
 *       }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Bitbucket Server / Data Center.
 * Instead of password authentication an access token stored in TeamCity is used.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = bitbucketServer {
 *     url = "<Bitbucket Server Base URL>"
 *     authType = storedToken {
 *       tokenId = "tc_token_id:*****"
 *     }
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Azure DevOps
 * For now only personal access token authentication type is supported. It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = azureDevOps {
 *     serverUrl = "<Azure DevOps URL>" // optional
 *     authType = personalToken {
 *       accessToken = "tc_token_id:*****"
 *     }
 *     publishPullRequests = true // optional
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to commits in Azure DevOps
 * Instead of password authentication an access token stored in TeamCity is used.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = azureDevOps {
 *     serverUrl = "<Azure DevOps URL>" // optional
 *     authType = storedToken {
 *       tokenId = "tc_token_id:*****"
 *     }
 *     publishPullRequests = true // optional
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to Perforce Helix Swarm.
 * For now only personal access token authentication type is supported. It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = swarm {
 *     serverUrl = "<Swarm URL>"
 *     username = "<username>"
 *     token = "credentialsJSON:*****"
 *     createSwarmTest = true // optional, if set, TeamCity will create a test run on the Swarm server and update its status according to the build status in TeamCity.
 *     commentOnEvents = true // optional
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables voting in Gerrit based on build statuses
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = gerrit {
 *     server = "<Gerrit server URL>"
 *     gerritProject = "<Gerrit project name>"
 *     label = "<label>" // e.g. Verified
 *     failureVote = "<failed build vote>" // e.g. -1
 *     successVote = "<successful build vote>" // e.g. +1
 *     userName = "<username>"
 *     uploadedKey = "<SSH key name>"
 *   }
 * }
 * ```
 *
 * **Example.**
 * Enables publishing build statuses to JetBrains Upsource.
 * It is not recommended to store secure values directly in the DSL code,
 * see [Managing Tokens](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens)
 * section of our documentation.
 * ```
 * commitStatusPublisher {
 *   vcsRootExtId = "${<VCS root object>.id}" // optional, publishes to all attached git VCS roots if omitted
 *   publisher = upsource {
 *     serverUrl = "<Upsource URL>"
 *     projectId = "<Upsource project id>"
 *     userName = "<username>"
 *     password = "credentialsJSON:*****"
 *   }
 * }
 * ```
 *
 *
 * @see CommitStatusPublisher
 */
fun BuildFeatures.commitStatusPublisher(base: CommitStatusPublisher? = null, init: CommitStatusPublisher.() -> Unit = {}) {
    feature(CommitStatusPublisher(init, base))
}
